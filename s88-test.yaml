esphome:
  name: "s88-test"
  friendly_name: "S88 Test"
  name_add_mac_suffix: true
  on_boot:
    - priority: 600.0
      then:
        - script.execute: fast_reboot_factory_reset
        - delay: 5s
        - script.execute: fast_reboot_clear

  on_loop:
    then:
      - script.wait: fast_reboot_factory_reset
      - script.execute: status_light_set

esp32:
  board: esp32-c3-devkitm-1
  framework:
    type: esp-idf

globals:
  - id: fast_reboot
    type: int
    restore_value: yes
    initial_value: "0"

  - id: factory_reset_reboot_counter
    type: int
    initial_value: "10"

logger:
  hardware_uart: UART0
  baud_rate: 115200
  level: info

script:
  - id: fast_reboot_factory_reset
    then:
      - if:
          condition:
            lambda: return ( id(fast_reboot) >= id(factory_reset_reboot_counter) );
          then:
            - logger.log:
                format: "Performing factory reset"
                level: WARN
            - script.execute: status_light_factory_reset
            - delay: 3s
            - button.press: factory_reset_button
      - if:
          condition:
            lambda: return id(fast_reboot) > 0;
          then:
            - logger.log:
                format: "Fast reboot %d/%d: do it %d more times to factory reset"
                args:
                  [
                    "id(fast_reboot)",
                    "id(factory_reset_reboot_counter)",
                    "id(factory_reset_reboot_counter) - id(fast_reboot)",
                  ]
                level: WARN
            - script.execute: status_light_factory_reset
            - delay: 500ms
      - lambda: |-
          id(fast_reboot) += 1;
          fast_reboot->loop();
          global_preferences->sync();
      - script.execute: status_light_boot

  - id: fast_reboot_clear
    then:
      - lambda: |-
          id(fast_reboot) = 0;
          fast_reboot->loop();
          global_preferences->sync();
      - logger.log: "Fast reboot flag cleared"

  - id: status_light_boot
    then:
      - light.turn_on:
          id: status_light
          effect: "boot"

  - id: status_light_connecting
    then:
      - light.turn_on:
          id: status_light
          effect: "connecting"

  - id: status_light_captive_portal
    then:
      - light.turn_on:
          id: status_light
          effect: "captive_portal"

  - id: status_light_connected
    then:
      - light.turn_off:
          id: status_light
      - light.turn_on:
          id: status_light
          brightness: 100%
          red: 0%
          green: 100%
          blue: 0%

  - id: status_light_factory_reset
    then:
      - light.turn_off:
          id: status_light
      - light.turn_on:
          id: status_light
          brightness: 100%
          red: 100%
          green: 0%
          blue: 0%

  - id: status_light_set
    then:
      lambda: |-
        const uint8_t state_boot = 0;
        const uint8_t state_connecting = 1;
        const uint8_t state_captive_portal = 2;
        const uint8_t state_connected = 3;

        static uint8_t last_state = state_connecting;

        uint8_t state;
        if(id(wifi_component).has_ap() && !id(wifi_component).has_sta()) {
            state = state_captive_portal;
        } else {
          if(id(wifi_component).is_connected()) {
            state = state_connected;
          } else {
            state = state_connecting;
          }
        }

        if (state != last_state) {
          switch (state) {
            case state_boot:
              id(status_light_boot).execute();
              break;
            case state_connecting:
              id(status_light_connecting).execute();
              break;
            case state_captive_portal:
              id(status_light_captive_portal).execute();
              break;
            case state_connected:
              id(status_light_connected).execute();
              break;
          }
          last_state = state;
        }

wifi:
  id: wifi_component
  ap:
    ap_timeout: 0s
  reboot_timeout: 0s
  power_save_mode: none

captive_portal:

web_server:

api:
  reboot_timeout: 0s

ota:
  platform: esphome

uart:
  id: uart_s88
  tx_pin: GPIO1
  rx_pin: GPIO10
  baud_rate: 9600

modbus:
  id: modbus_s88
  uart_id: uart_s88

modbus_controller:
  - id: modbus_controller_s88
    address: 0xFE
    modbus_id: modbus_s88
    update_interval: 3s
    max_cmd_retries: 0

#prometheus:

#debug:
#  update_interval: 5s

binary_sensor:
  - platform: status
    name: "Status"

  # MeterStatus: Fatal error (IR1/DI1)
  - platform: modbus_controller
    modbus_controller_id: modbus_controller_s88
    name: "Status: Fatal error"
    register_type: read
    address: 0x00
    bitmask: 0x01 # 1

  # MeterStatus: Algorithm Error (IR1/DI3)
  - platform: modbus_controller
    modbus_controller_id: modbus_controller_s88
    name: "Status: Algorithm Error"
    register_type: read
    address: 0x00
    bitmask: 0x04 # 3

  # MeterStatus: Output Error (IR1/DI4)
  - platform: modbus_controller
    modbus_controller_id: modbus_controller_s88
    name: "Status: Output Error"
    register_type: read
    address: 0x00
    bitmask: 0x08 # 4

  # MeterStatus: Self diagnostics error (IR1/DI5)
  - platform: modbus_controller
    modbus_controller_id: modbus_controller_s88
    name: "Status: Self diagnostics error"
    register_type: read
    address: 0x00
    bitmask: 0x10 # 5

  # MeterStatus: Out Of Range (IR1/DI6)
  - platform: modbus_controller
    modbus_controller_id: modbus_controller_s88
    name: "Status: Out Of Range"
    register_type: read
    address: 0x00
    bitmask: 0x20 # 6

  # MeterStatus: Memory error (IR1/DI7)
  - platform: modbus_controller
    modbus_controller_id: modbus_controller_s88
    name: "Status: Memory error"
    register_type: read
    address: 0x00
    bitmask: 0x40 # 7

  # MeterStatus: Warm Up (IR1/DI8)
  - platform: modbus_controller
    modbus_controller_id: modbus_controller_s88
    name: "Status: Warm Up"
    register_type: read
    address: 0x00
    bitmask: 0x80 # 8

  # Alarm Output satus (IR3/DI33)
  - platform: modbus_controller
    modbus_controller_id: modbus_controller_s88
    name: "Alarm: Status"
    register_type: read
    address: 0x02
    bitmask: 0x01
    filters:
      - invert:

  # PWM Output status (IR3/DI34)
  - platform: modbus_controller
    modbus_controller_id: modbus_controller_s88
    name: "PWM: Full Output"
    register_type: read
    address: 0x02
    bitmask: 0x02

sensor:
  - platform: uptime
    name: "Uptime"
    update_interval: 15s

  - platform: wifi_signal
    name: "WiFi Signal"
    update_interval: 15s

  # Space CO₂ (IR4)
  - platform: modbus_controller
    modbus_controller_id: modbus_controller_s88
    name: "Sensor: Space CO₂"
    register_type: "read"
    address: 0x03
    value_type: U_WORD
    unit_of_measurement: "ppm"

  # Space Temp (IR5)
  - platform: modbus_controller
    modbus_controller_id: modbus_controller_s88
    name: "Sensor: Space Temperature"
    register_type: "read"
    address: 0x04
    value_type: U_WORD
    unit_of_measurement: "C"
    accuracy_decimals: 2
    filters:
      - multiply: 0.01

  # Synchro (IR6)
  - platform: modbus_controller
    modbus_controller_id: modbus_controller_s88
    name: "Sensor: Synchro"
    register_type: "read"
    address: 0x05
    value_type: U_WORD
    unit_of_measurement: "measurement periods"

  # Vbb (IR7)
  - platform: modbus_controller
    modbus_controller_id: modbus_controller_s88
    name: "Sensor: Vbb"
    register_type: "read"
    address: 0x06
    value_type: U_WORD
    unit_of_measurement: "V"
    accuracy_decimals: 3
    filters:
      - multiply: 0.001

  # Elapsed Time counter (IR24,IR25)
  - platform: modbus_controller
    modbus_controller_id: modbus_controller_s88
    name: "Sensor: Elapsed Time"
    register_type: "read"
    address: 23
    register_count: 2
    value_type: U_DWORD
    unit_of_measurement: "h"

  # Memory Map Version (IR28)
  - platform: modbus_controller
    modbus_controller_id: modbus_controller_s88
    name: "Info: Memory Map Version"
    register_type: "read"
    address: 27
    value_type: U_WORD

  # Sensor ID (IR30,IR31)
  - platform: modbus_controller
    modbus_controller_id: modbus_controller_s88
    name: "Info: Sensor ID"
    register_type: "read"
    address: 29
    register_count: 2
    value_type: U_DWORD

  # PWM Output (IR22)
  - platform: modbus_controller
    modbus_controller_id: modbus_controller_s88
    name: "PWM: Duty cycle"
    register_type: "read"
    address: 21
    value_type: U_WORD
    lambda: "return x * 100.0 / 16383.0;"
    unit_of_measurement: "%"

  # Sensor Type ID (IR26,IR27)
  - platform: modbus_controller
    modbus_controller_id: modbus_controller_s88
    name: "Info: Sensor Type ID"
    register_type: "read"
    address: 25
    register_count: 2
    value_type: U_DWORD
    bitmask: 0x0FFF

select:
  # Static IIR Config (HR28)
  - platform: modbus_controller
    modbus_controller_id: modbus_controller_s88
    name: "IIR Filter"
    address: 27
    value_type: U_WORD
    optionsmap:
      "disabled": 0
      "1 static": 1
      "2 static": 2
      "3 static": 3
      "4 static": 4
      "5 static": 5
      "6 static": 6
      "7 static": 7
      "8 static": 8
      "9 static": 9
      "10 static": 10
      "11 static": 11
      "12 static": 12
      "13 static": 13
      "14 static": 14
      "15 static": 15
      "16 static": 16
      "factory default settings": 255

number:
  # Communication address (HR20)
  - platform: modbus_controller
    modbus_controller_id: modbus_controller_s88
    name: "Communication address"
    address: 19
    value_type: U_WORD
    min_value: 1
    max_value: 254
    step: 1
    mode: box

  # Pressure (HR4)
  - platform: modbus_controller
    modbus_controller_id: modbus_controller_s88
    name: "Pressure compensation"
    address: 3
    value_type: S_WORD
    unit_of_measurement: "hPa"
    multiply: 10
    min_value: 0
    step: 0.1
    max_value: 32767
    mode: box
    lambda: |-
      if(x<=0)
        return NAN;
      return x;

  # Default pressure (HR27)
  - platform: modbus_controller
    modbus_controller_id: modbus_controller_s88
    name: "Pressure compensation: default"
    address: 26
    value_type: S_WORD
    unit_of_measurement: "hPa"
    multiply: 10
    min_value: 0
    step: 0.1
    max_value: 32767
    mode: box
    lambda: |-
      if(x<=0)
        return NAN;
      return x;

  # ABC Period (HR32)
  - platform: modbus_controller
    modbus_controller_id: modbus_controller_s88
    name: "Calibration: ABC Period"
    address: 31
    value_type: U_WORD
    unit_of_measurement: "h"
    min_value: 0
    step: 1
    max_value: 65535
    mode: box
    lambda: |-
      if(x==0)
        return NAN;
      return x;

  # ABC Target
  - platform: modbus_controller
    modbus_controller_id: modbus_controller_s88
    name: "Calibration: ABC Target"
    address: 32
    value_type: U_WORD
    unit_of_measurement: "ppm"
    min_value: 0
    step: 1
    max_value: 65535
    mode: box

  # Calibration Target Register (HR3)
  - platform: modbus_controller
    modbus_controller_id: modbus_controller_s88
    name: "Calibration: Target"
    address: 2
    value_type: U_WORD
    unit_of_measurement: "ppm"
    min_value: 0
    step: 1
    max_value: 65535
    mode: box

  # OUT0 RDB (HR10)
  - platform: modbus_controller
    modbus_controller_id: modbus_controller_s88
    name: "Alarm: Regulator Dead Band"
    id: alarm_regulator_dead_band
    address: 9
    value_type: U_WORD
    min_value: 0
    step: 1
    max_value: 32767
    mode: box
    unit_of_measurement: "ppm"
    lambda: |-
      uint16_t high = static_cast<uint16_t>(data[item->offset] & 0x7F);
      uint16_t low = static_cast<uint16_t>(data[item->offset+1]);
      return (high << 8) | low;
    write_lambda: |-
      uint8_t shape_bit;
      if (id(alarm_mirror_in_y_axis).state) {
        shape_bit = 0x80;
      } else {
        shape_bit = 0x00;
      }
      uint16_t value = x;
      uint16_t high = (value & 0xFF00) >> 8;
      uint16_t low = value & 0xff;
      return ((shape_bit|high) << 8) | low;

  # OUT0 RDB (HR10)
  - platform: modbus_controller
    modbus_controller_id: modbus_controller_s88
    id: alarm_regulator_dead_band_internal
    internal: true
    address: 9
    value_type: U_WORD

  # OUT0 PRC (HR11)
  - platform: modbus_controller
    modbus_controller_id: modbus_controller_s88
    name: "Alarm: Proportional Regulator Constant"
    id: alarm_proportional_regulator_constant
    address: 10
    value_type: U_WORD
    min_value: 0
    step: 1
    max_value: 32767
    mode: box
    unit_of_measurement: "ppm"
    lambda: |-
      uint16_t high = static_cast<uint16_t>(data[item->offset] & 0x7F);
      uint16_t low = static_cast<uint16_t>(data[item->offset+1]);
      return (high << 8) | low;
    write_lambda: |-
      uint8_t shape_bit;
      if (id(alarm_mirror_in_x_axis).state) {
        shape_bit = 0x80;
      } else {
        shape_bit = 0x00;
      }
      uint16_t value = x;
      uint16_t high = (value & 0xFF00) >> 8;
      uint16_t low = value & 0xff;
      return ((shape_bit|high) << 8) | low;

  # OUT0 PRC (HR11)
  - platform: modbus_controller
    modbus_controller_id: modbus_controller_s88
    id: alarm_proportional_regulator_constant_internal
    internal: true
    address: 10
    value_type: U_WORD

  # OUT1 RDB (HR12)
  - platform: modbus_controller
    modbus_controller_id: modbus_controller_s88
    name: "PWM: Regulator Dead Band"
    id: pwm_regulator_dead_band
    address: 11
    value_type: U_WORD
    min_value: 0
    step: 1
    max_value: 32767
    mode: box
    unit_of_measurement: "ppm"
    lambda: |-
      uint16_t high = static_cast<uint16_t>(data[item->offset] & 0x7F);
      uint16_t low = static_cast<uint16_t>(data[item->offset+1]);
      return (high << 8) | low;
    write_lambda: |-
      uint8_t shape_bit;
      if (id(pwm_mirror_in_y_axis).state) {
        shape_bit = 0x80;
      } else {
        shape_bit = 0x00;
      }
      uint16_t value = x;
      uint16_t high = (value & 0xFF00) >> 8;
      uint16_t low = value & 0xff;
      return ((shape_bit|high) << 8) | low;

  # OUT1 RDB (HR12)
  - platform: modbus_controller
    modbus_controller_id: modbus_controller_s88
    id: pwm_regulator_dead_band_internal
    internal: true
    address: 11
    value_type: U_WORD

  # OUT1 PRC (HR13)
  - platform: modbus_controller
    modbus_controller_id: modbus_controller_s88
    name: "PWM: Proportional Regulator Constant"
    id: pwm_proportional_regulator_constant
    address: 12
    value_type: U_WORD
    min_value: 0
    step: 1
    max_value: 32767
    mode: box
    unit_of_measurement: "ppm"
    lambda: |-
      uint16_t high = static_cast<uint16_t>(data[item->offset] & 0x7F);
      uint16_t low = static_cast<uint16_t>(data[item->offset+1]);
      return (high << 8) | low;
    write_lambda: |-
      uint8_t shape_bit;
      if (id(pwm_mirror_in_x_axis).state) {
        shape_bit = 0x80;
      } else {
        shape_bit = 0x00;
      }
      uint16_t value = x;
      uint16_t high = (value & 0xFF00) >> 8;
      uint16_t low = value & 0xff;
      return ((shape_bit|high) << 8) | low;

  # OUT1 PRC (HR13)
  - platform: modbus_controller
    modbus_controller_id: modbus_controller_s88
    id: pwm_proportional_regulator_constant_internal
    address: 12
    value_type: U_WORD

  # OUT1 MinLimit (HR14)
  - platform: modbus_controller
    modbus_controller_id: modbus_controller_s88
    name: "PWM: Min output duty cycle"
    address: 13
    value_type: U_WORD
    min_value: 0
    step: 1
    max_value: 100
    mode: box
    lambda: "return x * 100.0 / 16383.0;"
    write_lambda: "return x * 16383.0 / 100.0;"
    unit_of_measurement: "%"

  # OUT1 MaxLimit (HR15)
  - platform: modbus_controller
    modbus_controller_id: modbus_controller_s88
    name: "PWM: Max output duty cycle"
    address: 14
    value_type: U_WORD
    min_value: 0
    step: 1
    max_value: 100
    mode: box
    lambda: "return x * 100.0 / 16383.0;"
    write_lambda: "return x * 16383.0 / 100.0;"
    unit_of_measurement: "%"

  # OUT1 Offset (HR16)
  - platform: modbus_controller
    modbus_controller_id: modbus_controller_s88
    name: "PWM: Offset"
    address: 15
    value_type: U_WORD
    min_value: 0
    step: 1
    max_value: 100
    mode: box
    lambda: "return x * 100.0 / 16383.0;"
    write_lambda: "return x * 16383.0 / 100.0;"
    unit_of_measurement: "%"

  # OUT1 Override (HR22)
  - platform: modbus_controller
    modbus_controller_id: modbus_controller_s88
    name: "PWM: Override"
    address: 21
    value_type: U_WORD
    min_value: 0
    step: 1
    max_value: 100
    mode: box
    lambda: |-
      if(x==65535)
        return NAN;
      return x * 100.0 / 16383.0;
    write_lambda: "return x * 16383.0 / 100.0;"
    unit_of_measurement: "%"

switch:
  # OUT0 RDB (HR10)
  - platform: modbus_controller
    modbus_controller_id: modbus_controller_s88
    name: "Alarm: Mirror in y-axis"
    id: alarm_mirror_in_y_axis
    register_type: holding
    address: 9
    bitmask: 0x8000
    restore_mode: DISABLED
    write_lambda: |-
      uint16_t number = (uint16_t)id(alarm_regulator_dead_band).state;
      uint16_t value;
      if(x)
        value = number | 0x8000;
      else
        value = number;
      auto call = id(alarm_regulator_dead_band_internal).make_call();
      call.set_value(value);
      call.perform();
      return {};

  # OUT0 PRC (HR11)
  - platform: modbus_controller
    modbus_controller_id: modbus_controller_s88
    name: "Alarm: Mirror in x-axis"
    id: alarm_mirror_in_x_axis
    register_type: holding
    address: 10
    bitmask: 0x8000
    restore_mode: DISABLED
    write_lambda: |-
      uint16_t number = (uint16_t)id(alarm_proportional_regulator_constant).state;
      uint16_t value;
      if(x)
        value = number | 0x8000;
      else
        value = number;
      auto call = id(alarm_proportional_regulator_constant_internal).make_call();
      call.set_value(value);
      call.perform();
      return {};

  # OUT1 RDB (HR12)
  - platform: modbus_controller
    modbus_controller_id: modbus_controller_s88
    name: "PWM: Mirror in y-axis"
    id: pwm_mirror_in_y_axis
    register_type: holding
    address: 11
    bitmask: 0x8000
    restore_mode: DISABLED
    write_lambda: |-
      uint16_t number = (uint16_t)id(pwm_regulator_dead_band).state;
      uint16_t value;
      if(x)
        value = number | 0x8000;
      else
        value = number;
      auto call = id(pwm_regulator_dead_band_internal).make_call();
      call.set_value(value);
      call.perform();
      return {};

  # OUT1 PRC (HR13)
  - platform: modbus_controller
    modbus_controller_id: modbus_controller_s88
    name: "PWM: Mirror in x-axis"
    id: pwm_mirror_in_x_axis
    register_type: holding
    address: 12
    bitmask: 0x8000
    restore_mode: DISABLED
    write_lambda: |-
      uint16_t number = (uint16_t)id(pwm_proportional_regulator_constant).state;
      uint16_t value;
      if(x)
        value = number | 0x8000;
      else
        value = number;
      auto call = id(pwm_proportional_regulator_constant_internal).make_call();
      call.set_value(value);
      call.perform();
      return {};

light:
  - platform: esp32_rmt_led_strip
    id: status_light
    num_leds: 1
    rgb_order: GRB
    chipset: WS2812
    pin: 8
    default_transition_length: 0s
    effects:
      - strobe:
          name: "boot"
          colors:
            - state: true
              brightness: 100%
              red: 100%
              green: 100%
              blue: 100%
              duration: 250ms
            - state: false
              duration: 250ms
      - strobe:
          name: "connecting"
          colors:
            - state: true
              brightness: 100%
              red: 0%
              green: 0%
              blue: 100%
              duration: 250ms
            - state: false
              duration: 250ms
      - strobe:
          name: "captive_portal"
          colors:
            - state: true
              brightness: 100%
              red: 100%
              green: 100%
              blue: 0%
              duration: 250ms
            - state: false
              duration: 250ms

  # - platform: debug
  #   free:
  #     name: "Debug: Heap Free"
  #   # esp8266
  #   # fragmentation:
  #   #   name: "Debug: Heap Fragmentation"
  #   block:
  #     name: "Debug: Heap Largest Contiguous Free Block"
  #   loop_time:
  #     name: "Debug: Loop Time"
  #   # esp32
  #   # psram:
  #   #   name: "Debug: Free PSRAM"

button:
  - platform: factory_reset
    id: factory_reset_button
    name: "Factory reset"

  - platform: restart
    name: "Restart"

  - platform: safe_mode
    name: "Safe Mode"

text_sensor:
  - platform: wifi_info
    ip_address:
      name: "Wifi Info: IP Address"
    ssid:
      name: "Wifi Info: SSID"
    bssid:
      name: "Wifi Info: BSSID"
    mac_address:
      name: "Wifi Info: MAC Address"
    dns_address:
      name: "Wifi Info: DNS Address"

  # - platform: debug
  #   device:
  #     name: "Debug: Device Info"
  #   reset_reason:
  #     name: "Debug: Reset Reason"

  # FW version (IR29)
  - platform: modbus_controller
    modbus_controller_id: modbus_controller_s88
    name: "FW Version"
    raw_encode: NONE
    register_type: "read"
    address: 28
    response_size: 2
    lambda: |-
      return std::to_string(data[item->offset]) + "." + std::to_string(data[item->offset+1]);
