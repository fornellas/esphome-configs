esphome:
  name: "esp32-cam"
  friendly_name: "ESP32 Cam"
  name_add_mac_suffix: true
  on_boot:
    - priority: 600.0
      then:
        - lambda: |-
            // Default: Connecting
            id(wifi_led_pwm).set_level(0.5);
            id(wifi_led_pwm).set_period(1000);
            id(wifi_led_pwm).turn_on();
        - script.execute: fast_reboot_factory_reset
  on_loop:
    then:
      - lambda: |-
          // Captive portal
          if(id(wifi_component).has_ap() && !id(wifi_component).has_sta()) {
            id(wifi_led_pwm).set_level(0.5);
            id(wifi_led_pwm).set_period(200);
          } else {
            id(wifi_led_pwm).set_period(1000);
            // Connected
            if(id(wifi_component).is_connected())
              id(wifi_led_pwm).set_level(1);
            // Connecting
            else
              id(wifi_led_pwm).set_level(0.5);
          }

esp32:
  board: esp32cam

globals:
  - id: fast_reboot
    type: int
    restore_value: yes
    initial_value: '0'

  - id: factory_reset_reboot_counter
    type: int
    initial_value: '2'

logger:
  baud_rate: 0
  level: info

script:
  - id: fast_reboot_factory_reset
    then:
      - if:
          condition:
            lambda: return ( id(fast_reboot) >= id(factory_reset_reboot_counter) );
          then:
            - lambda: |-
                ESP_LOGI("Fast Boot Factory Reset", "Performing factotry reset");
                id(fast_reboot) = 0;
                fast_reboot->loop();
                global_preferences->sync();
            - button.press: factory_reset_button
      - lambda: |-
          if(id(fast_reboot) > 0)
            ESP_LOGI("Fast Boot Factory Reset", "Quick reboot %d/%d, do it %d more times to factory reset", id(fast_reboot), id(factory_reset_reboot_counter), id(factory_reset_reboot_counter) - id(fast_reboot));
          id(fast_reboot) += 1;
          fast_reboot->loop();
          global_preferences->sync();
      - delay: 10s
      - lambda: |-
          id(fast_reboot) = 0;
          fast_reboot->loop();
          global_preferences->sync();

wifi:
  id: wifi_component
  ap:
    ap_timeout: 0s
  reboot_timeout: 0s
  power_save_mode: none

captive_portal:
    
web_server:

api:
  reboot_timeout: 0s

ota:
  safe_mode: false

esp32_camera:
  external_clock:
    pin: GPIO0
    frequency: 20MHz
  i2c_pins:
    sda: GPIO26
    scl: GPIO27
  data_pins: [GPIO5, GPIO18, GPIO19, GPIO21, GPIO36, GPIO39, GPIO34, GPIO35]
  vsync_pin: GPIO25
  href_pin: GPIO23
  pixel_clock_pin: GPIO22
  power_down_pin: GPIO32
  name: "ESP32 Cam"
  # resolution: 160x120 # (QQVGA)
  # resolution: 176x144 # (QCIF)
  # resolution: 240x176 # (HQVGA)
  # resolution: 320x240 # (QVGA)
  # resolution: 400x296 # (CIF)
  # resolution: 640x480 # (VGA, default)
  # resolution: 800x600 # (SVGA)
  # resolution: 1024x768 # (XGA)
  # resolution: 1280x1024 # (SXGA)
  resolution: 1600x1200 # (UXGA)
  # jpeg_quality: 10 # From 10 (best) to 63 (worst)
  # vertical_flip: true
  # horizontal_mirror: true
  # contrast: 0 # from -2 to 2
  # brightness: 0 # from -2 to 2
  # saturation: 0 # from -2 to 2
  # special_effect: none # Picture without effect
  # special_effect: negative # Colors of picture are inverted
  # special_effect: grayscale # Only luminance of picture is kept
  # special_effect: red_tint # Picture appear red-tinted
  # special_effect: green_tint # Picture appear green-tinted
  # special_effect: blue_tint # Picture appear blue-tinted
  # special_effect: sepia # Sepia effect is applied to picture
  # aec_mode: manual
  # aec_mode: auto
  # aec2: false
  # ae_level: 0 # when aec_mode is set to auto, from -2 to 2
  # aec_value: 300 # when aec_mode is set to manual, from 0 to 1200
  # agc_mode: manual
  # agc_mode: auto
  # agc_value: 0 # when aec_mode is set to manual,from 0 to 30
  # agc_gain_ceiling: 2x # when aec_mode is set to manual, 2x, 4x, 8x, 16x, 32x, 64x, 128x
  # wb_mode: auto
  # wb_mode: sunny
  # wb_mode: cloudy
  # wb_mode: office
  # wb_mode: home
  # on_stream_start:
  # on_stream_stop:
  # on_image:

esp32_camera_web_server:
  - port: 8080
    mode: stream
  - port: 8081
    mode: snapshot

binary_sensor:
  - platform: status
    name: "Status"

sensor:
  - platform: uptime
    name: 'Uptime'
    update_interval: 15s

  - platform: wifi_signal
    name: "WiFi Signal"
    update_interval: 15s

output:
  - platform: slow_pwm
    id: wifi_led_pwm
    period: 1s
    pin: GPIO33
    inverted: true

button:
  - platform: factory_reset
    id: factory_reset_button
    name: "Factory reset"

  - platform: restart
    name: "Restart"

  - platform: safe_mode
    name: "Safe Mode"

text_sensor:
  - platform: wifi_info
    ip_address:
      name: "Wifi Info: IP Address"
    ssid:
      name: "Wifi Info: SSID"
    bssid:
      name: "Wifi Info: BSSID"
    mac_address:
      name: "Wifi Info: MAC Address"
    dns_address:
      name: "Wifi Info: DNS Address"