# TODO
# - Test all hours
# - Add text field to set timezone
esphome:
  name: "word-clock"
  friendly_name: "Word Clock"
  name_add_mac_suffix: true
  on_boot:
    - priority: 600.0
      then:
        - script.execute: word_clock_light_connecting
        - script.execute: fast_reboot_factory_reset
  on_loop:
    then:
      - lambda: |-
          const uint8_t state_connecting = 0;
          const uint8_t state_captive_portal = 1;
          const uint8_t state_connected = 2;
          static uint8_t last_state = state_connecting;

          uint8_t state;
          if (id(wifi_component).has_ap() && !id(wifi_component).has_sta()) {
            state = state_captive_portal;
          } else {
            if (id(wifi_component).is_connected())
              state = state_connected;
            else
              state = state_connecting;
          }

          if (state != last_state) {
            switch (state) {
              case state_connecting:
                id(word_clock_light_connecting).execute();
                break;
              case state_captive_portal:
                id(word_clock_light_captive_portal).execute();
                break;
              case state_connected:
                auto call = id(word_clock_light).turn_on();
                call.set_effect(0);
                call.set_brightness(1);
                call.perform();
                break;
            }
            last_state = state;
          }

          if (state == state_connected) {
            uint32_t now = millis();
            static uint32_t last_millis = millis();
            if (now - last_millis > 500) {
              static WordClock word_clock = WordClock((AddressableLight *) id(word_clock_light).get_output());
              word_clock.set_time(id(sntp_time).now());
              last_millis = now;
            }
          }
  includes:
    - word-clock.h
    - word-clock.cpp

esp32:
  board: esp32-c3-devkitm-1

globals:
  - id: fast_reboot
    type: int
    restore_value: yes
    initial_value: '0'

  - id: factory_reset_reboot_counter
    type: int
    initial_value: '2'

logger:
  baud_rate: 0
  level: info

script:
  - id: fast_reboot_factory_reset
    then:
      - if:
          condition:
            lambda: return ( id(fast_reboot) >= id(factory_reset_reboot_counter) );
          then:
            - lambda: |-
                ESP_LOGI("Fast Boot Factory Reset", "Performing factotry reset");
                id(fast_reboot) = 0;
                fast_reboot->loop();
                global_preferences->sync();
            - button.press: factory_reset_button
      - lambda: |-
          if(id(fast_reboot) > 0)
            ESP_LOGI("Fast Boot Factory Reset", "Quick reboot %d/%d, do it %d more times to factory reset", id(fast_reboot), id(factory_reset_reboot_counter), id(factory_reset_reboot_counter) - id(fast_reboot));
          id(fast_reboot) += 1;
          fast_reboot->loop();
          global_preferences->sync();
      - delay: 10s
      - lambda: |-
          id(fast_reboot) = 0;
          fast_reboot->loop();
          global_preferences->sync();

  - id: word_clock_light_connecting
    then:
      - light.turn_on:
          id: word_clock_light
          brightness: 100%
          red: 0%
          green: 0%
          blue: 100%
      - light.turn_on:
          id: word_clock_light
          effect: "Connecting"

  - id: word_clock_light_captive_portal
    then:
      - light.turn_on:
          id: word_clock_light
          brightness: 100%
          red: 0%
          green: 0%
          blue: 100%
      - light.turn_on:
          id: word_clock_light
          effect: "Captive Portal"

wifi:
  id: wifi_component
  ap:
    ap_timeout: 0s
  reboot_timeout: 0s
  power_save_mode: none

captive_portal:
    
web_server:

api:
  reboot_timeout: 0s

ota:
  safe_mode: false

i2c:
  sda: 5
  scl: 4
  scan: false

binary_sensor:
  - platform: status
    name: "Status"

sensor:
  - platform: uptime
    name: 'Uptime'
    update_interval: 15s

  - platform: wifi_signal
    name: "WiFi Signal"
    update_interval: 15s

  - platform: bh1750
    name: "Illuminance"
    address: 0x23
    update_interval: 1s

light:
  - platform: neopixelbus
    name: "Word Clock"
    id: word_clock_light
    num_leds: 76
    type: GRB
    variant: 800KBPS # Unstable
    # variant: 400KBPS # All white-ish
    # variant: WS2811 # Unstable
    # variant: WS2812 # Unstable
    # variant: WS2812X # Unstable
    # variant: WS2813 # Unstable
    # variant: SK6812 # Unstable
    # variant: TM1814 # All white-ish
    # variant: TM1829 # All white-ish & rainbow
    # variant: TM1914 # 
    # variant: APA106 # 
    # variant: LC8812 # 
    pin: 7
    method:
      type: esp32_rmt
    effects:
      - strobe:
          name: "Connecting"
          colors:
            - state: true
              brightness: 100%
              red: 0%
              green: 0%
              blue: 100%
              duration: 500ms
            - state: false
              duration: 500ms
      - strobe:
          name: "Captive Portal"
          colors:
            - state: true
              brightness: 100%
              red: 0%
              green: 0%
              blue: 100%
              duration: 250ms
            - state: false
              duration: 250ms

button:
  - platform: factory_reset
    id: factory_reset_button
    name: "Factory reset"

  - platform: restart
    name: "Restart"

  - platform: safe_mode
    name: "Safe Mode"

text_sensor:
  - platform: wifi_info
    ip_address:
      name: "Wifi Info: IP Address"
    ssid:
      name: "Wifi Info: SSID"
    bssid:
      name: "Wifi Info: BSSID"
    mac_address:
      name: "Wifi Info: MAC Address"
    dns_address:
      name: "Wifi Info: DNS Address"

time:
  - platform: sntp
    id: sntp_time
    timezone: Etc/UTC