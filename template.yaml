esphome:
  name: "template"
  friendly_name: "Template"
  name_add_mac_suffix: true
  on_boot:
    - priority: 600.0
      then:
        - script.execute: fast_reboot_factory_reset
        - delay: 5s
        - script.execute: fast_reboot_clear

  on_loop:
    then:
      - script.wait: fast_reboot_factory_reset
      - script.execute: status_light_set

esp32:
  board: esp32-c3-devkitm-1
  framework:
    type: esp-idf

# esp8266:
#   board: esp8285
#   restore_from_flash: true

globals:
  - id: fast_reboot
    type: int
    restore_value: yes
    initial_value: "0"

  - id: factory_reset_reboot_counter
    type: int
    initial_value: "10"

logger:
  hardware_uart: UART0
  baud_rate: 0
  level: info

script:
  - id: fast_reboot_factory_reset
    then:
      - if:
          condition:
            lambda: return ( id(fast_reboot) >= id(factory_reset_reboot_counter) );
          then:
            - logger.log:
                format: "Performing factory reset"
                level: WARN
            - script.execute: status_light_factory_reset
            - delay: 3s
            - button.press: factory_reset_button
      - if:
          condition:
            lambda: return id(fast_reboot) > 0;
          then:
            - logger.log:
                format: "Fast reboot %d/%d: do it %d more times to factory reset"
                args:
                  [
                    "id(fast_reboot)",
                    "id(factory_reset_reboot_counter)",
                    "id(factory_reset_reboot_counter) - id(fast_reboot)",
                  ]
                level: WARN
            - script.execute: status_light_factory_reset
            - delay: 500ms
      - lambda: |-
          id(fast_reboot) += 1;
          fast_reboot->loop();
          global_preferences->sync();
      - script.execute: status_light_boot

  - id: fast_reboot_clear
    then:
      - lambda: |-
          id(fast_reboot) = 0;
          fast_reboot->loop();
          global_preferences->sync();
      - logger.log: "Fast reboot flag cleared"

  - id: status_light_boot
    then:
      - light.turn_on:
          id: status_light
          effect: "boot"

  - id: status_light_connecting
    then:
      - light.turn_on:
          id: status_light
          effect: "connecting"

  - id: status_light_captive_portal
    then:
      - light.turn_on:
          id: status_light
          effect: "captive_portal"

  - id: status_light_connected
    then:
      - light.turn_off:
          id: status_light
      - light.turn_on:
          id: status_light
          brightness: 100%
          red: 0%
          green: 100%
          blue: 0%

  - id: status_light_factory_reset
    then:
      - light.turn_off:
          id: status_light
      - light.turn_on:
          id: status_light
          brightness: 100%
          red: 100%
          green: 0%
          blue: 0%

  - id: status_light_set
    then:
      lambda: |-
        const uint8_t state_boot = 0;
        const uint8_t state_connecting = 1;
        const uint8_t state_captive_portal = 2;
        const uint8_t state_connected = 3;

        static uint8_t last_state = state_connecting;

        uint8_t state;
        if(id(wifi_component).has_ap() && !id(wifi_component).has_sta()) {
            state = state_captive_portal;
        } else {
          if(id(wifi_component).is_connected()) {
            state = state_connected;
          } else {
            state = state_connecting;
          }
        }

        if (state != last_state) {
          switch (state) {
            case state_boot:
              id(status_light_boot).execute();
              break;
            case state_connecting:
              id(status_light_connecting).execute();
              break;
            case state_captive_portal:
              id(status_light_captive_portal).execute();
              break;
            case state_connected:
              id(status_light_connected).execute();
              break;
          }
          last_state = state;
        }

wifi:
  id: wifi_component
  ap:
    ap_timeout: 0s
  reboot_timeout: 0s
  power_save_mode: none

captive_portal:

web_server:
  local: true

api:
  reboot_timeout: 0s

ota:
  platform: esphome

#prometheus:

#debug:
#  update_interval: 5s

binary_sensor:
  - platform: status
    name: "Status"

sensor:
  - platform: uptime
    name: "Uptime"
    update_interval: 15s

  - platform: wifi_signal
    name: "WiFi Signal"
    update_interval: 15s

light:
  - platform: esp32_rmt_led_strip
    id: status_light
    num_leds: 1
    rgb_order: GRB
    chipset: WS2812
    pin: 8
    default_transition_length: 0s
    effects:
      - strobe:
          name: "boot"
          colors:
            - state: true
              brightness: 100%
              red: 100%
              green: 100%
              blue: 100%
              duration: 250ms
            - state: false
              duration: 250ms
      - strobe:
          name: "connecting"
          colors:
            - state: true
              brightness: 100%
              red: 0%
              green: 0%
              blue: 100%
              duration: 250ms
            - state: false
              duration: 250ms
      - strobe:
          name: "captive_portal"
          colors:
            - state: true
              brightness: 100%
              red: 100%
              green: 100%
              blue: 0%
              duration: 250ms
            - state: false
              duration: 250ms

  # - platform: debug
  #   free:
  #     name: "Debug: Heap Free"
  #   # esp8266
  #   # fragmentation:
  #   #   name: "Debug: Heap Fragmentation"
  #   block:
  #     name: "Debug: Heap Largest Contiguous Free Block"
  #   loop_time:
  #     name: "Debug: Loop Time"
  #   # esp32
  #   # psram:
  #   #   name: "Debug: Free PSRAM"

button:
  - platform: factory_reset
    id: factory_reset_button
    name: "Factory reset"

  - platform: restart
    name: "Restart"

  - platform: safe_mode
    name: "Safe Mode"

text_sensor:
  - platform: wifi_info
    ip_address:
      name: "Wifi Info: IP Address"
    ssid:
      name: "Wifi Info: SSID"
    bssid:
      name: "Wifi Info: BSSID"
    mac_address:
      name: "Wifi Info: MAC Address"
    dns_address:
      name: "Wifi Info: DNS Address"

  # - platform: debug
  #   device:
  #     name: "Debug: Device Info"
  #   reset_reason:
  #     name: "Debug: Reset Reason"
