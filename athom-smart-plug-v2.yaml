esphome:
  name: "athom-smart-plug-v2"
  friendly_name: "Athom Smart Plug V2"
  name_add_mac_suffix: true
  on_boot:
    - priority: 600.0
      then:
        - lambda: |-
            id(wifi_led_pwm).set_level(0.5);
            id(wifi_led_pwm).set_period(1000);
            id(wifi_led_pwm).turn_on();
        - script.execute: fast_reboot_factory_reset
  on_loop:
    then:
      - lambda: |-
          if(id(wifi_component).has_ap() && !id(wifi_component).has_sta()) {
            // Captive portal
            id(wifi_led_pwm).set_level(0.5);
            id(wifi_led_pwm).set_period(200);
          } else {
            id(wifi_led_pwm).set_period(1000);
            if(id(wifi_component).is_connected())
              id(wifi_led_pwm).set_level(1);
            else
              id(wifi_led_pwm).set_level(0.5);
          }

esp8266:
  board: esp8285
  restore_from_flash: true

globals:
  - id: fast_reboot
    type: int
    restore_value: yes
    initial_value: '0'

  - id: factory_reset_reboot_counter
    type: int
    initial_value: '2'

  - id: total_energy
    type: float
    restore_value: yes
    initial_value: '0.0'

logger:

script:
  - id: fast_reboot_factory_reset
    then:
      - if:
          condition:
            lambda: return ( id(fast_reboot) >= id(factory_reset_reboot_counter) );
          then:
            - lambda: |-
                ESP_LOGD("Fast Boot Factory Reset", "Performing factotry reset");
                id(fast_reboot) = 0;
                fast_reboot->loop();
                global_preferences->sync();
            - button.press: factory_reset_button
      - lambda: |-
          if(id(fast_reboot) > 0)
            ESP_LOGD("Fast Boot Factory Reset", "Quick reboot %d/%d, do it %d more times to factory reset", id(fast_reboot), id(factory_reset_reboot_counter), id(factory_reset_reboot_counter) - id(fast_reboot));
          id(fast_reboot) += 1;
          fast_reboot->loop();
          global_preferences->sync();
      - delay: 10s
      - lambda: |-
          id(fast_reboot) = 0;
          fast_reboot->loop();
          global_preferences->sync();

wifi:
  id: wifi_component
  ap:
    ap_timeout: 0s
  reboot_timeout: 0s

captive_portal:
    
web_server:

api:
  reboot_timeout: 0s

ota:
  safe_mode: false

prometheus:

uart:
  rx_pin: RX
  baud_rate: 4800

binary_sensor:
  - platform: status
    name: "ESPHome: Status"

  - platform: gpio
    id: relay_button
    pin:
      number: 5
      mode: INPUT_PULLUP
      inverted: true
    disabled_by_default: true
    on_multi_click:
      - timing:
          - ON for at most 1s
          - OFF for at least 0.2s
        then:
          - switch.toggle: relay
      - timing:
          - ON for at least 4s
        then:
          - button.press: factory_reset_button

sensor:
  - platform: uptime
    name: 'ESPHome: Uptime'
    icon: 'mdi:timer-outline'
    update_interval: 1s

  - platform: wifi_signal
    name: "ESPHome: WiFi Signal"
    unit_of_measurement: "dB"
    id: wifi_signal_db
    update_interval: 15s
    entity_category: "diagnostic"
    icon: 'mdi:signal'

  - platform: cse7766
    update_interval: 10s
    current:
      name: "Current"
      filters:
          - lambda: if (x < 0.060) return 0.0; else return x;   #For the chip will report less than 3w power when no load is connected
    voltage:
      name: "Voltage"
    power:
      name: "Power"
      id: power_sensor
      filters:
          - lambda: if (x < 3.0) return 0.0; else return x;    #For the chip will report less than 3w power when no load is connected
    energy:
      name: "Energy"
      id: energy
      unit_of_measurement: kWh
      filters:
        # Multiplication factor from W to kW is 0.001
        - multiply: 0.001
      on_value:
        then:
          - lambda: |-
              static float previous_energy_value = 0.0;
              float current_energy_value = id(energy).state;
              id(total_energy) += current_energy_value - previous_energy_value;
              previous_energy_value = current_energy_value;

  - platform: template
    name: "Total Energy"
    unit_of_measurement: kWh
    device_class: "energy"
    state_class: "total_increasing"
    icon: "mdi:lightning-bolt"
    # accuracy_decimals: 3
    lambda: |-
      return id(total_energy);
    update_interval: 10s

  - platform: total_daily_energy
    name: "Total Daily Energy"
    restore: true
    power_id: power_sensor
    unit_of_measurement: kWh
    # accuracy_decimals: 3
    filters:
      - multiply: 0.001

output:
  - platform: slow_pwm
    pin:
      number: GPIO13
      inverted: true
    id: wifi_led_pwm
    period: 1s

switch:
  - platform: gpio
    pin: GPIO12
    id: relay
    restore_mode: RESTORE_DEFAULT_OFF
    # on_turn_on:
    #   - output.turn_on: relay_led
    # on_turn_off:
    #   - output.turn_off: relay_led

button:
  - platform: factory_reset
    id: factory_reset_button
    name: "ESPHome: Factory reset"

  - platform: restart
    name: "ESPHome: Restart"

  - platform: safe_mode
    name: "ESPHome: Safe Mode"

text_sensor:
  - platform: wifi_info
    ip_address:
      name: "ESPHome: Wifi IP Address"
    ssid:
      name: "ESPHome: Wifi Connected SSID"
    bssid:
      name: "ESPHome: Wifi Connected BSSID"
    mac_address:
      name: "ESPHome: Wifi Mac Wifi Address"
    dns_address:
      name: "ESPHome: Wifi DNS Address"

time:
  - platform: sntp