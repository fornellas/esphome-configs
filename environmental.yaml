substitutions:
  mhz19_warmup: "75"

esphome:
  name: "environmental"
  friendly_name: "Environmental"
  name_add_mac_suffix: true
  on_boot:
    - priority: 600.0
      then:
        - lambda: |-
            // Default: Connecting
            id(wifi_led_pwm).set_level(0.5);
            id(wifi_led_pwm).set_period(1000);
            id(wifi_led_pwm).turn_on();
        - script.execute: fast_reboot_factory_reset
    - priority: 800.0
      then:
        - lambda: |-
            // mhz19
            if(id(mhz19_abc))
              id(mhz19_sensor).abc_enable();
            else
              id(mhz19_sensor).abc_disable();
            id(mhz19_hd).turn_on();

            // pmsx003
            id(pmsx003_reset).turn_off();
            id(pmsx003_set).turn_off();
            delay(20);
            id(pmsx003_reset).turn_on();
            id(pmsx003_set).turn_on();

            // aqi_led
            id(aqi_led).set_level(0.0);
            id(aqi_led).turn_on();

  on_loop:
    then:
      - lambda: |-
          // Captive portal
          if(id(wifi_component).has_ap() && !id(wifi_component).has_sta()) {
            id(wifi_led_pwm).set_level(0.5);
            id(wifi_led_pwm).set_period(200);
          } else {
            id(wifi_led_pwm).set_period(1000);
            // Connected
            if(id(wifi_component).is_connected())
              id(wifi_led_pwm).set_level(1);
            // Connecting
            else
              id(wifi_led_pwm).set_level(0.5);
          }

esp32:
  board: esp32-c3-devkitm-1

external_components:
  - source:
      type: git
      url: https://github.com/fornellas/esphome
      ref: mhz19_warmup
    components: [ mhz19 ]
    refresh: 0s

globals:
  - id: fast_reboot
    type: int
    restore_value: yes
    initial_value: '0'

  - id: factory_reset_reboot_counter
    type: int
    initial_value: '5'

  - id: mhz19_calibrate_zero_unix_timestamp
    type: time_t
    restore_value: yes
    initial_value: '0'

  - id: mhz19_abc
    type: bool
    restore_value: yes
    initial_value: 'false'

  - id: mhz19_calibration_factor
    type: double
    restore_value: yes
    initial_value: '1'

logger:
  baud_rate: 0
  level: info

script:
  - id: fast_reboot_factory_reset
    then:
      - if:
          condition:
            lambda: return ( id(fast_reboot) >= id(factory_reset_reboot_counter) );
          then:
            - lambda: |-
                ESP_LOGI("Fast Boot Factory Reset", "Performing factotry reset");
                id(fast_reboot) = 0;
                fast_reboot->loop();
                global_preferences->sync();
            - button.press: factory_reset_button
      - lambda: |-
          if(id(fast_reboot) > 0)
            ESP_LOGI("Fast Boot Factory Reset", "Quick reboot %d/%d, do it %d more times to factory reset", id(fast_reboot), id(factory_reset_reboot_counter), id(factory_reset_reboot_counter) - id(fast_reboot));
          id(fast_reboot) += 1;
          fast_reboot->loop();
          global_preferences->sync();
      - delay: 10s
      - lambda: |-
          id(fast_reboot) = 0;
          fast_reboot->loop();
          global_preferences->sync();

  - id: mhz19_calibrate_zero
    then:
      - output.turn_on: mhz19_calibration_led
      - mhz19.calibrate_zero: mhz19_sensor
      - lambda: |-
          auto time = id(sntp_time).utcnow();
          if(time.is_valid()) {
            id(mhz19_calibrate_zero_unix_timestamp) = time.timestamp;
            mhz19_calibrate_zero_unix_timestamp->loop();
            global_preferences->sync();
            ESP_LOGD("MH-Z19", "Saved zero calibration timestamp");
          } else {
            ESP_LOGW("MH-Z19", "Time unavailable, can't save zero calibration timestamp");
          }
      - delay: 2s
      - output.turn_off: mhz19_calibration_led

wifi:
  id: wifi_component
  ap:
    ap_timeout: 0s
  reboot_timeout: 0s
  power_save_mode: none

captive_portal:
    
web_server:

api:
  reboot_timeout: 0s

ota:
  safe_mode: false

uart:
  - id: uart_mhz19
    rx_pin: 5
    tx_pin: 4
    baud_rate: 9600

  - id: uart_pmsx003
    rx_pin: 1
    tx_pin:
      number: 2
      ignore_strapping_warning: true
    baud_rate: 9600

i2c:
  sda: 19
  scl: 10
  scan: false

binary_sensor:
  - platform: status
    name: "Status"

  - platform: gpio
    id: mhz19_sensor_calibrate_zero
    pin:
      number: 18
      mode: INPUT_PULLUP
    on_press:
      then:
        - script.execute:  mhz19_calibrate_zero

sensor:
  - platform: uptime
    name: 'Uptime'
    update_interval: 15s

  - platform: wifi_signal
    name: "WiFi Signal"
    update_interval: 15s

  - platform: mhz19
    id: mhz19_sensor
    uart_id: uart_mhz19
    co2:
      id: mhz19_sensor_co2
      name: "CO₂ (UART)"
      filters:
        - lambda: return id(mhz19_calibration_factor) * x;
    update_interval: 1s
    automatic_baseline_calibration: true
    warmup_time: "${mhz19_warmup}s"

  - platform: duty_cycle
    name: "CO₂ (PWM)"
    unit_of_measurement: "ppm"
    icon: "mdi:molecule-co2"
    accuracy_decimals: 0
    pin:
      number: 7
      mode:
        input: true
    update_interval: 1s
    filters:
      - lambda: |-
          if(millis() < ${mhz19_warmup} * 1000)
            return NAN;
          return id(mhz19_calibration_factor) * (x/100.0*1004.0-2.0)*5.0;

  - platform: template
    name: "MH-Z19: Last zero calibration unix timestamp"
    unit_of_measurement: "s"
    lambda: |-
      time_t timestamp = id(mhz19_calibrate_zero_unix_timestamp);
      if (timestamp == 0)
        return NAN;
      return timestamp;
    update_interval: 1s

  - platform: template
    name: "MH-Z19: Last zero calibration time ago"
    unit_of_measurement: "s"
    lambda: |-
      time_t timestamp = id(mhz19_calibrate_zero_unix_timestamp);
      if (timestamp == 0)
        return NAN;
      esphome::ESPTime now = id(sntp_time).utcnow();
      if(!now.is_valid())
        return NAN;
      return now.timestamp - timestamp;
    update_interval: 1s

  - platform: sht3xd
    temperature:
      name: "Temperature"
    humidity:
      name: "Humidity"
    address: 0x44
    update_interval: 1s

  - platform: pmsx003
    type: PMSX003
    uart_id: uart_pmsx003
    pm_1_0_std:
      name: "PM1.0 (CF=1，standard particle)"
      unit_of_measurement: "μg/m³"
    pm_2_5_std:
      name: "PM2.5 (CF=1，standard particle)"
      unit_of_measurement: "μg/m³"
    pm_10_0_std:
      name: "PM10.0 (CF=1，standard particle)"
      unit_of_measurement: "μg/m³"
    pm_1_0:
      name: "PM1.0 (under atmospheric environment)"
      unit_of_measurement: "μg/m³"
    pm_2_5:
      name: "PM2.5 (under atmospheric environment)"
      unit_of_measurement: "μg/m³"
      id: pmsx003_pm25
    pm_10_0:
      name: "PM10.0 (under atmospheric environment)"
      unit_of_measurement: "μg/m³"
      id: pmsx003_pm10
    pm_0_3um:
      name: "Number of particles with diameter beyond 0.3μm in 0.1 L of air"
      unit_of_measurement: ""
    pm_0_5um:
      name: "Number of particles with diameter beyond 0.5μm in 0.1 L of air"
      unit_of_measurement: ""
    pm_1_0um:
      name: "Number of particles with diameter beyond 1.0μm in 0.1 L of air"
      unit_of_measurement: ""
    pm_2_5um:
      name: "Number of particles with diameter beyond 2.5μm in 0.1 L of air"
      unit_of_measurement: ""
    pm_5_0um:
      name: "Number of particles with diameter beyond 5.0μm in 0.1 L of air"
      unit_of_measurement: ""
    pm_10_0um:
      name: "Number of particles with diameter beyond 10.0μm in 0.1 L of air"
      unit_of_measurement: ""
    update_interval: 60s

  - platform: template
    name: "AQI"
    lambda: |-
      double aqi = -1;

      // mhz19
      double co2_ppm = id(mhz19_sensor_co2).state;
      if(!std::isnan(co2_ppm)) {
        double aqi_co2 = 0.0;
        if(co2_ppm < 400.0)
          aqi_co2 = co2_ppm / 400.0;
        else if(co2_ppm < 1000.0)
          aqi_co2 = 1.0 + (co2_ppm - 400.0) / 600.0;
        else if(co2_ppm < 1500.0)
          aqi_co2 = 2.0 + (co2_ppm - 1000.0) / 500.0;
        else if(co2_ppm < 2000.0)
          aqi_co2 = 3.0 + (co2_ppm - 1500.0) / 500.0;
        else if(co2_ppm < 5000.0)
          aqi_co2 = 4.0 + (co2_ppm - 2000.0) / 3000.0;
        else
          aqi_co2 = 6.0;
        if(aqi_co2 > aqi)
          aqi = aqi_co2;
      }

      // pmsx003 pm25
      double pm25 = id(pmsx003_pm25).state;
      if(!std::isnan(pm25)) {
        double aqi_pm25 = 0.0;
        if(pm25 < 10.0)
          aqi_pm25 = pm25 / 10.0;
        else if(pm25 < 20.0)
          aqi_pm25 = 1.0 + (pm25 - 10.0) / 10.0;
        else if(pm25 < 25.0)
          aqi_pm25 = 2.0 + (pm25 - 20.0) / 5.0;
        else if(pm25 < 50.0)
          aqi_pm25 = 3.0 + (pm25 - 25.0) / 25.0;
        else if(pm25 < 75.0)
          aqi_pm25 = 4.0 + (pm25 - 50.0) / 25.0;
        else
          aqi_pm25 = 6.0;
        if(aqi_pm25 > aqi)
          aqi = aqi_pm25;
      }

      // pmsx003 pm10
      double pm10 = id(pmsx003_pm10).state;
      if(!std::isnan(pm10)) {
        double aqi_pm10 = 0.0;
        if(pm10 < 20.0)
          aqi_pm10 = pm10 / 20.0;
        else if(pm10 < 40.0)
          aqi_pm10 = 1.0 + (pm10 - 20.0) / 20.0;
        else if(pm10 < 50.0)
          aqi_pm10 = 2.0 + (pm10 - 40.0) / 10.0;
        else if(pm10 < 100.0)
          aqi_pm10 = 3.0 + (pm10 - 50.0) / 50.0;
        else if(pm10 < 150.0)
          aqi_pm10 = 4.0 + (pm10 - 100.0) / 50.0;
        else
          aqi_pm10 = 6.0;
        if(aqi_pm10 > aqi)
          aqi = aqi_pm10;
      }

      if(aqi >= 0.0)
        return aqi;
      return NAN;
    update_interval: 1s
    on_value:
      then:
        - lambda: |-
            double level = (x - 1.0) / 5.0;
            id(aqi_led).set_level(level);

output:
  - platform: slow_pwm
    id: wifi_led_pwm
    period: 1s
    pin:
      inverted: true
      number: 9
      ignore_strapping_warning: true

  - platform: gpio
    id: mhz19_hd
    pin: 6

  - platform: gpio
    id: pmsx003_set
    pin: 0

  - platform: gpio
    id: pmsx003_reset
    pin: 3

  - platform: gpio
    id: mhz19_calibration_led
    pin: 21

  - platform: slow_pwm
    id: aqi_led
    period: 1s
    pin: 20

button:
  - platform: factory_reset
    id: factory_reset_button
    name: "Factory reset"

  - platform: restart
    name: "Restart"

  - platform: safe_mode
    name: "Safe Mode"

  - platform: template
    name: "MH19: Calibrate Zero"
    entity_category: config
    on_press:
      then:
        - script.execute:  mhz19_calibrate_zero

text_sensor:
  - platform: wifi_info
    ip_address:
      name: "Wifi Info: IP Address"
    ssid:
      name: "Wifi Info: SSID"
    bssid:
      name: "Wifi Info: BSSID"
    mac_address:
      name: "Wifi Info: MAC Address"
    dns_address:
      name: "Wifi Info: DNS Address"

  - platform: template
    name: "MH-Z19: Last zero calibration"
    lambda: |-
      char buffer[32];
      auto espTime = ESPTime::from_epoch_utc(id(mhz19_calibrate_zero_unix_timestamp));
      espTime.strftime(buffer, sizeof(buffer), "%a, %d %b %Y %H:%M:%S %z");
      return {buffer};
    update_interval: 1s

switch:
  - platform: template
    name: "MH-Z19: ABC"
    entity_category: config
    lambda: |-
      return id(mhz19_abc);
    turn_on_action:
      - mhz19.abc_enable: mhz19_sensor
      - globals.set:
          id: mhz19_abc
          value: 'true'
    turn_off_action:
      - mhz19.abc_disable: mhz19_sensor
      - globals.set:
          id: mhz19_abc
          value: 'false'

text:
  - platform: template
    name: "MH-Z19: Calibration Factor"
    entity_category: config
    optimistic: true
    mode: text
    on_value:
      then:
        - globals.set:
            id: mhz19_calibration_factor
            value: !lambda "return std::stod(x);"

time:
  - platform: sntp
    id: sntp_time
    timezone: Etc/UTC