esphome:
  name: "environmental"
  friendly_name: "Environmental"
  name_add_mac_suffix: true
  on_boot:
    - priority: 600.0
      then:
        - lambda: |-
            // Default: Connecting
            id(wifi_led_pwm).set_level(0.5);
            id(wifi_led_pwm).set_period(1000);
            id(wifi_led_pwm).turn_on();
        - script.execute: fast_reboot_factory_reset
    - priority: 800.0
      then:
        - lambda: |-
            // mhz19
            if(id(mhz19_abc))
              id(mhz19_sensor).abc_enable();
            else
              id(mhz19_sensor).abc_disable();
            id(mhz19_hd).turn_on();

            // pmsx003
            id(pmsx003_set).turn_on();
            id(pmsx003_reset).turn_on();

  on_loop:
    then:
      - lambda: |-
          // Captive portal
          if(id(wifi_component).has_ap() && !id(wifi_component).has_sta()) {
            id(wifi_led_pwm).set_level(0.5);
            id(wifi_led_pwm).set_period(200);
          } else {
            id(wifi_led_pwm).set_period(1000);
            // Connected
            if(id(wifi_component).is_connected())
              id(wifi_led_pwm).set_level(1);
            // Connecting
            else
              id(wifi_led_pwm).set_level(0.5);
          }

esp32:
  board: esp32-c3-devkitm-1

globals:
  - id: fast_reboot
    type: int
    restore_value: yes
    initial_value: '0'

  - id: factory_reset_reboot_counter
    type: int
    initial_value: '2'

  - id: mhz19_calibrate_zero_timestamp
    type: time_t
    restore_value: yes
    initial_value: '0'

  - id: mhz19_abc
    type: bool
    restore_value: yes
    initial_value: 'false'

logger:
  baud_rate: 0
  level: info

script:
  - id: fast_reboot_factory_reset
    then:
      - if:
          condition:
            lambda: return ( id(fast_reboot) >= id(factory_reset_reboot_counter) );
          then:
            - lambda: |-
                ESP_LOGI("Fast Boot Factory Reset", "Performing factotry reset");
                id(fast_reboot) = 0;
                fast_reboot->loop();
                global_preferences->sync();
            - button.press: factory_reset_button
      - lambda: |-
          if(id(fast_reboot) > 0)
            ESP_LOGI("Fast Boot Factory Reset", "Quick reboot %d/%d, do it %d more times to factory reset", id(fast_reboot), id(factory_reset_reboot_counter), id(factory_reset_reboot_counter) - id(fast_reboot));
          id(fast_reboot) += 1;
          fast_reboot->loop();
          global_preferences->sync();
      - delay: 10s
      - lambda: |-
          id(fast_reboot) = 0;
          fast_reboot->loop();
          global_preferences->sync();
  - id: mhz19_calibrate_zero_timestamp_save
    then:
      - lambda: |-
          auto time = id(sntp_time).utcnow();
          if(time.is_valid()) {
            id(mhz19_calibrate_zero_timestamp) = time.timestamp;
            mhz19_calibrate_zero_timestamp->loop();
            global_preferences->sync();
            ESP_LOGD("MH-Z19", "Saved zero calibration timestamp");
          } else {
            ESP_LOGW("MH-Z19", "Time unavailable, can't save zero calibration timestamp");
          }

wifi:
  id: wifi_component
  ap:
    ap_timeout: 0s
  reboot_timeout: 60s
  power_save_mode: none

captive_portal:
    
web_server:

api:
  reboot_timeout: 60s

ota:
  safe_mode: false

uart:
  - id: uart_mhz19
    rx_pin: 5
    tx_pin: 4
    baud_rate: 9600

  - id: uart_pmsx003
    rx_pin: 1
    tx_pin: 2
    baud_rate: 9600

i2c:
  sda: 19
  scl: 10
  scan: false

binary_sensor:
  - platform: status
    name: "Status"

  - platform: gpio
    id: mhz19_sensor_calibrate_zero
    pin:
      number: 18
      mode: INPUT_PULLUP
    on_press:
      then:
        - mhz19.calibrate_zero: mhz19_sensor
        - script.execute:  mhz19_calibrate_zero_timestamp_save

sensor:
  - platform: uptime
    name: 'Uptime'
    update_interval: 15s

  - platform: wifi_signal
    name: "WiFi Signal"
    update_interval: 15s

  - platform: mhz19
    id: mhz19_sensor
    uart_id: uart_mhz19
    co2:
      name: "CO₂ (UART)"
    update_interval: 1s
    automatic_baseline_calibration: true

  - platform: duty_cycle
    name: "CO₂ (PWM)"
    unit_of_measurement: "ppm"
    pin:
      number: 7
      mode:
        input: true
    update_interval: 1s
    filters:
      - lambda: |-
          return (x/100.0*1004.0-2.0)*5.0;

  - platform: template
    name: "MH-Z19: Last zero calibration timestamp"
    lambda: |-
      return id(mhz19_calibrate_zero_timestamp);
    update_interval: 1s

  - platform: sht3xd
    temperature:
      name: "Temperature"
    humidity:
      name: "Humidity"
    address: 0x44
    update_interval: 1s

  - platform: pmsx003
    type: PMSX003
    uart_id: uart_pmsx003
    pm_1_0_std:
      name: "PM1.0 CF=1，standard particle)"
      unit_of_measurement: "μg/m³"
    pm_2_5_std:
      name: "PM2.5 CF=1，standard particle)"
      unit_of_measurement: "μg/m³"
    pm_10_0_std:
      name: "PM10.0 CF=1，standard particle)"
      unit_of_measurement: "μg/m³"
    pm_1_0:
      name: "PM1.0 (under atmospheric environment"
      unit_of_measurement: "μg/m³"
    pm_2_5:
      name: "PM2.5 (under atmospheric environment"
      unit_of_measurement: "μg/m³"
    pm_10_0:
      name: "PM10.0 (under atmospheric environment"
      unit_of_measurement: "μg/m³"
    pm_0_3um:
      name: "Number of particles with diameter beyond 0.3μm in 0.1 L of air"
      unit_of_measurement: ""
    pm_0_5um:
      name: "Number of particles with diameter beyond 0.5μm in 0.1 L of air"
      unit_of_measurement: ""
    pm_1_0um:
      name: "Number of particles with diameter beyond 1.0μm in 0.1 L of air"
      unit_of_measurement: ""
    pm_2_5um:
      name: "Number of particles with diameter beyond 2.5μm in 0.1 L of air"
      unit_of_measurement: ""
    pm_5_0um:
      name: "Number of particles with diameter beyond 5.0μm in 0.1 L of air"
      unit_of_measurement: ""
    pm_10_0um:
      name: "Number of particles with diameter beyond 10.0μm in 0.1 L of air"
      unit_of_measurement: ""
    # update_interval: 120s

output:
  - platform: slow_pwm
    id: wifi_led_pwm
    period: 1s
    pin:
      inverted: true
      number: 9
      ignore_strapping_warning: true

  - platform: gpio
    id: mhz19_hd
    pin: 6

  - platform: gpio
    id: pmsx003_set
    pin: 0

  - platform: gpio
    id: pmsx003_reset
    pin: 3

button:
  - platform: factory_reset
    id: factory_reset_button
    name: "Factory reset"

  - platform: restart
    name: "Restart"

  - platform: safe_mode
    name: "Safe Mode"

  - platform: template
    name: "MH19: Calibrate Zero"
    on_press:
      then:
        - mhz19.calibrate_zero: mhz19_sensor
        - script.execute:  mhz19_calibrate_zero_timestamp_save

text_sensor:
  - platform: wifi_info
    ip_address:
      name: "Wifi Info: IP Address"
    ssid:
      name: "Wifi Info: SSID"
    bssid:
      name: "Wifi Info: BSSID"
    mac_address:
      name: "Wifi Info: MAC Address"
    dns_address:
      name: "Wifi Info: DNS Address"

  - platform: template
    name: "MH-Z19: Last zero calibration"
    lambda: |-
      char buffer[32];
      auto espTime = ESPTime::from_epoch_utc(id(mhz19_calibrate_zero_timestamp));
      espTime.strftime(buffer, sizeof(buffer), "%a, %d %b %Y %H:%M:%S %z");
      return {buffer};
    update_interval: 1s

switch:
  - platform: template
    name: "MH-Z19: ABC"
    lambda: |-
      return id(mhz19_abc);
    turn_on_action:
      - mhz19.abc_enable: mhz19_sensor
      - globals.set:
          id: mhz19_abc
          value: 'true'
    turn_off_action:
      - mhz19.abc_disable: mhz19_sensor
      - globals.set:
          id: mhz19_abc
          value: 'false'

time:
  - platform: sntp
    id: sntp_time
    timezone: Etc/UTC