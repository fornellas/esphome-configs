esphome:
  name: "athom-rgbct-light"
  friendly_name: "Athom RGBCT Light"
  name_add_mac_suffix: true

esp8266:
  board: esp8285
  restore_from_flash: true

globals:
  - id: fast_reboot
    type: int
    restore_value: yes
    initial_value: '0'

  - id: factory_reset_reboot_counter
    type: int
    initial_value: '2'

logger:
  baud_rate: 0
  level: INFO

script:
  - id: fast_reboot_factory_reset
    then:
      - if:
          condition:
            lambda: return ( id(fast_reboot) >= id(factory_reset_reboot_counter) );
          then:
            - lambda: |-
                ESP_LOGI("Fast Boot Factory Reset", "Performing factotry reset");
                id(fast_reboot) = 0;
                fast_reboot->loop();
                global_preferences->sync();
            - button.press: factory_reset_button
      - lambda: |-
          if(id(fast_reboot) > 0)
            ESP_LOGI("Fast Boot Factory Reset", "Quick reboot %d/%d, do it %d more times to factory reset", id(fast_reboot), id(factory_reset_reboot_counter), id(factory_reset_reboot_counter) - id(fast_reboot));
          id(fast_reboot) += 1;
          fast_reboot->loop();
          global_preferences->sync();
      - delay: 10s
      - lambda: |-
          id(fast_reboot) = 0;
          fast_reboot->loop();
          global_preferences->sync();

wifi:
  id: wifi_component
  ap:
    ap_timeout: 0s
  reboot_timeout: 0s

captive_portal:
    
web_server:

api:
  reboot_timeout: 0s

ota:
  safe_mode: false

prometheus:

binary_sensor:
  - platform: status
    name: "ESPHome: Status"

sensor:
  - platform: uptime
    name: 'ESPHome: Uptime'
    icon: 'mdi:timer-outline'
    update_interval: 1s

  - platform: wifi_signal
    name: "ESPHome: WiFi Signal"
    unit_of_measurement: "dB"
    id: wifi_signal_db
    update_interval: 15s
    entity_category: "diagnostic"
    icon: 'mdi:signal'

text_sensor:
  - platform: wifi_info
    ip_address:
      name: "ESPHome: Wifi IP Address"
    ssid:
      name: "ESPHome: Wifi Connected SSID"
    bssid:
      name: "ESPHome: Wifi Connected BSSID"
    mac_address:
      name: "ESPHome: Wifi Mac Wifi Address"
    dns_address:
      name: "ESPHome: Wifi DNS Address"

output:
  - platform: esp8266_pwm
    id: red_output
    pin: GPIO4
    min_power: 0
    max_power: 1

  - platform: esp8266_pwm
    id: green_output
    pin: GPIO12
    min_power: 0
    max_power: 0.53

  - platform: esp8266_pwm
    id: blue_output
    pin: GPIO14
    min_power: 0
    max_power: 0.24

  - platform: esp8266_pwm
    id: white_output
    pin: GPIO5
    min_power: 0
    max_power: 1

  - platform: esp8266_pwm
    id: color_temperature
    inverted: true
    pin: GPIO13

light:
  - platform: rgbct
    id: rgbct_light
    default_transition_length: 50ms
    restore_mode: RESTORE_DEFAULT_ON
    red: red_output
    green: green_output
    blue: blue_output
    color_temperature: color_temperature
    white_brightness: white_output
    cold_white_color_temperature: 6500 K
    warm_white_color_temperature: 2000 K
    color_interlock: true

switch:
  - platform: template
    name: "RGBCT Light: Power"
    id: rgbct_light_power_switch
    restore_mode: RESTORE_DEFAULT_ON
    lambda: |-
      bool is_on;
      id(rgbct_light).current_values_as_binary(&is_on);
      if (is_on) {
        return true;
      } else {
        return false;
      }
    turn_on_action:
     - light.turn_on: rgbct_light
    turn_off_action:
      - light.turn_off: rgbct_light

  - platform: template
    name: "RGBCT Light: RGB"
    id: rgbct_light_rgb_switch
    restore_mode: RESTORE_DEFAULT_OFF
    lambda: |-
      ColorMode color_mode = id(rgbct_light).current_values.get_color_mode();
      if (color_mode == ColorMode::RGB)
        return true;
      return false;
    turn_on_action:
      then:
        - light.control:
            id: rgbct_light
            color_mode: RGB
    turn_off_action:
      then:
        - light.control:
            id: rgbct_light
            color_mode: COLOR_TEMPERATURE

number:
  - platform: template
    name: "RGBCT Light: RGB: Red"
    id: rgbct_number_red
    unit_of_measurement: "%"
    min_value: 0
    max_value: 100
    step: 0.1
    lambda: |-
      return id(rgbct_light).current_values.get_red() * 100.0;
    update_interval: 50ms
    set_action:
      - light.control:
          id: rgbct_light
          color_mode: RGB
          red: !lambda "return float(x) / 100.0;"

  - platform: template
    name: "RGBCT Light: RGB: Green"
    id: rgbct_number_green
    unit_of_measurement: "%"
    min_value: 0
    max_value: 100
    step: 0.1
    lambda: |-
      return id(rgbct_light).current_values.get_green() * 100.0;
    update_interval: 50ms
    set_action:
      - light.control:
          id: rgbct_light
          color_mode: RGB
          green: !lambda "return float(x) / 100.0;"

  - platform: template
    name: "RGBCT Light: RGB: Blue"
    id: rgbct_number_blue
    unit_of_measurement: "%"
    min_value: 0
    max_value: 100
    step: 0.1
    lambda: |-
      return id(rgbct_light).current_values.get_blue() * 100.0;
    update_interval: 50ms
    set_action:
      - light.control:
          id: rgbct_light
          color_mode: RGB
          blue: !lambda "return float(x) / 100.0;"

  - platform: template
    name: "RGBCT Light: Color Temperature"
    id: rgbct_number_color_temperature
    unit_of_measurement: "K"
    min_value: 2000
    max_value: 6500
    step: 1
    lambda: |-
      return 1000000.0 / id(rgbct_light).current_values.get_color_temperature();
    update_interval: 50ms
    set_action:
      - light.turn_on:
          id: rgbct_light
          color_mode: COLOR_TEMPERATURE
          color_temperature: !lambda |-
            return 1000000.0 / float(x);

  - platform: template
    name: "RGBCT Light: Brightness"
    id: rgbct_number_brightness
    unit_of_measurement: "%"
    min_value: 0
    max_value: 100
    step: 0.1
    lambda: |-
      return id(rgbct_light).current_values.get_brightness() * 100.0;
    update_interval: 50ms
    set_action:
      - light.turn_on:
          id: rgbct_light
          brightness: !lambda "return float(x) / 100.0;"

button:
  - platform: factory_reset
    id: factory_reset_button
    name: "ESPHome: Factory reset"

  - platform: restart
    name: "ESPHome: Restart"

  - platform: safe_mode
    name: "ESPHome: Safe Mode"