esphome:
  name: "athom-rgbct-light"
  friendly_name: "Athom RGBCT Light"
  name_add_mac_suffix: true
  on_boot:
    - priority: 600.0
      then:
        # - lambda: |-
        #     id(wifi_led_pwm).set_level(0.5);
        #     id(wifi_led_pwm).set_period(1000);
        #     id(wifi_led_pwm).turn_on();
        - script.execute: fast_reboot_factory_reset
  # on_loop:
  #   then:
  #     - lambda: |-
  #         if(id(wifi_component).has_ap() && !id(wifi_component).has_sta()) {
  #           // Captive portal
  #           id(wifi_led_pwm).set_level(0.5);
  #           id(wifi_led_pwm).set_period(200);
  #         } else {
  #           id(wifi_led_pwm).set_period(1000);
  #           if(id(wifi_component).is_connected())
  #             id(wifi_led_pwm).set_level(1);
  #           else
  #             id(wifi_led_pwm).set_level(0.5);
  #         }

esp8266:
  board: esp8285
  restore_from_flash: true

globals:
  - id: fast_reboot
    type: int
    restore_value: yes
    initial_value: '0'

  - id: factory_reset_reboot_counter
    type: int
    initial_value: '2'

logger:

script:
  - id: fast_reboot_factory_reset
    then:
      - if:
          condition:
            lambda: return ( id(fast_reboot) >= id(factory_reset_reboot_counter) );
          then:
            - lambda: |-
                ESP_LOGD("Fast Boot Factory Reset", "Performing factotry reset");
                id(fast_reboot) = 0;
                fast_reboot->loop();
                global_preferences->sync();
            - switch.turn_on: factory_reset_switch
      - lambda: |-
          if(id(fast_reboot) > 0)
            ESP_LOGD("Fast Boot Factory Reset", "Quick reboot %d/%d, do it %d more times to factory reset", id(fast_reboot), id(factory_reset_reboot_counter), id(factory_reset_reboot_counter) - id(fast_reboot));
          id(fast_reboot) += 1;
          fast_reboot->loop();
          global_preferences->sync();
      - delay: 10s
      - lambda: |-
          id(fast_reboot) = 0;
          fast_reboot->loop();
          global_preferences->sync();

wifi:
  id: wifi_component
  ap:
    ap_timeout: 0s
  reboot_timeout: 0s

captive_portal:
    
web_server:

api:
  reboot_timeout: 0s

ota:
  safe_mode: false

prometheus:

binary_sensor:
  - platform: status
    name: "ESPHome: Status"

sensor:
  - platform: uptime
    name: 'ESPHome: Uptime'
    icon: 'mdi:timer-outline'
    update_interval: 1s

  - platform: wifi_signal
    name: "ESPHome: WiFi Signal"
    unit_of_measurement: "dB"
    id: wifi_signal_db
    update_interval: 15s
    entity_category: "diagnostic"
    icon: 'mdi:signal'

output:
  - platform: esp8266_pwm
    id: red_output
    pin: GPIO4
    min_power: 0.000499
    max_power: 1
    zero_means_zero: true

  - platform: esp8266_pwm
    id: green_output
    pin: GPIO12
    min_power: 0.000499
    max_power: 1
    zero_means_zero: true

  - platform: esp8266_pwm
    id: blue_output
    pin: GPIO14
    min_power: 0.000499
    max_power: 1
    zero_means_zero: true

  - platform: esp8266_pwm
    id: white_output
    pin: GPIO5
    min_power: 0.01
    max_power: 1
    zero_means_zero: true

  - platform: esp8266_pwm
    id: ct_output
    inverted: true
    pin: GPIO13

light:
  - platform: rgbct
    id: rgbct_light
    restore_mode: RESTORE_DEFAULT_ON
    red: red_output
    green: green_output
    blue: blue_output
    white_brightness: white_output
    color_temperature: ct_output
    cold_white_color_temperature: 153 mireds
    warm_white_color_temperature: 500 mireds
    color_interlock: true

switch:
  - platform: factory_reset
    id: factory_reset_switch
    name: "ESPHome: Factory reset"

button:
  - platform: restart
    name: "ESPHome: Restart"

  - platform: safe_mode
    name: "ESPHome: Safe Mode"

text_sensor:
  - platform: wifi_info
    ip_address:
      name: "ESPHome: Wifi IP Address"
    ssid:
      name: "ESPHome: Wifi Connected SSID"
    bssid:
      name: "ESPHome: Wifi Connected BSSID"
    mac_address:
      name: "ESPHome: Wifi Mac Wifi Address"
    dns_address:
      name: "ESPHome: Wifi DNS Address"